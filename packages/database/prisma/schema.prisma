generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
  binaryTargets = ["debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}
generator zod {
  provider       = "npx zod-prisma-types"
  useMultipleFiles = false
  output = "../src/validators"
  createInputTypes = false
  createPartialTypes = true
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int     @id @default(autoincrement())
  email       String @unique
  name        String
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  productSearchHistories ProductSearchHistory[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  parent_id       Int?       
  parentCategory  Category? @relation("CategoryToParent", fields: [parent_id], references: [id]) 
  childCategories Category[] @relation("CategoryToParent")  
  url      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
   @@fulltext([name])
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  url      String   @unique
  description  String
  price        Float
  quantity     Int
  discount     Float @default(0)
  tags         String?
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   Int
  images       ProductImage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime     @default(now())
  @@fulltext([name, description,tags])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  url        String
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
enum DeviceType {
  DESKTOP
  MOBILE
  TABLET
  OTHER
}

model ProductSearchHistory {
  id        Int      @id @default(autoincrement())
  keyword   String  
  userId    Int?     
  ip        String   @db.VarChar(45) 
  deviceType  DeviceType
  location  String?
  resultsCount  Int
  newKeyword  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}